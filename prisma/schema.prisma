// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roles {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       Users[]
  access      Access[]
}

model Users {
  id                Int         @id @default(autoincrement())
  names             String    
  surnames          String
  email             String      @unique
  confirmedEmail    DateTime?
  username          String      @unique
  idRol             Int
  role              Roles       @relation(fields: [idRol], references: [id])
  enabled           Boolean     @default(true)
  password          String
  image             String?
  twoFactorAuth     Boolean     @default(false)
  twoFactorCode     String?
  twoFactorConfirm  DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  sessions          Sessions[]
  notificationsConfigure    NotificationsConfigure?
  systemConfigure           SystemConfigure[]
}

model Menus {
  id          Int      @id @default(autoincrement())
  title       String
  url         String
  icon        String
  isActive    Boolean
  description String
  idFather    Int?
  menu        Boolean
  showMenu    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  father      Menus?   @relation("MenuToSubMenu", fields: [idFather], references: [id])
  children    Menus[]  @relation("MenuToSubMenu")
  access      Access[]
}

model Access {
  id          Int @id @default(autoincrement())
  idMenu      Int
  idRol       Int
  role        Roles       @relation(fields: [idRol], references: [id])
  menu        Menus       @relation(fields: [idMenu], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([idMenu, idRol])
}

model Sessions {
  id          Int       @id @default(autoincrement())
  idUser      Int
  ipAddress   String
  userAgent   String
  device      String?
  token       String    @unique
  expiresAt   DateTime
  revokedAt   DateTime?
  createdAt   DateTime  @default(now())
  user        Users     @relation(fields: [idUser], references: [id])
}

model NotificationsConfigure {
  id              Int       @id @default(autoincrement())
  idUser          Int       @unique
  user            Users     @relation(fields: [idUser], references: [id])
  emailSessions   Boolean   @default(true)
  passwordChange  Boolean   @default(true)
  updatesSystem   Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model SystemConfigure {
  id                      Int     @id @default(autoincrement())
  twofactoreRequired      Boolean @default(false)
  idUserUpdate            Int
  updatedAt               DateTime @updatedAt
  user                    Users   @relation(fields: [idUserUpdate], references: [id])
}